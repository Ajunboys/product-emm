<%
var username = session.get("username");
var platform = request.getParameter("platform");
var HttpClient = Packages.org.apache.commons.httpclient.HttpClient;
var PostMethod = Packages.org.apache.commons.httpclient.methods.PostMethod;
var Header = Packages.org.apache.commons.httpclient.Header;
var StringRequestEntity = Packages.org.apache.commons.httpclient.methods.StringRequestEntity;
var log = new Log("agent-enroll.jag");

//var iOSResponse;

if (username) {
    var userAgent = request.getHeader("User-Agent");
    var UAParser = require("/modules/ua-parser.min.js").UAParser;
    var parser = new UAParser();
    parser.setUA(userAgent);
    parser.getResult();
    var os = parser.getOS();
    var platform = os.name;

    var password = session.get("password");
    var ownership = session.get("ownership");
    var challengeToken = session.get("iOS_challenge_token");
    var mdmProps = require('/config/mdm-props.js').config();
    log.info(platform);
    if(platform == "iOS"){
        var enrollUrl = mdmProps.iOSConfigRoot + 'enrollment/enroll';
        var client = new HttpClient();
        var method = new PostMethod(enrollUrl);
        var header =  new Header();
        header.setName("Content-Type");
        header.setValue("application/json");
        method.addRequestHeader(header);
        var inputs = {"username": username, "password": password, "challengeToken": challengeToken};

        var re = new StringRequestEntity(String(stringify(inputs)));
        method.setRequestEntity(re);
        try {
            client.executeMethod(method);
            var status = method.getStatusCode();
            log.info(String(inputs.toString()));
            if (status == 200) {
                session.put("enrollUser", username);
                var stream = method.getResponseBody();
                response.contentType = "application/x-apple-aspen-config";
                var byteArrayInputStream = new Packages.java.io.ByteArrayInputStream(stream);
                print(new Stream(byteArrayInputStream));
            } else if (status == 403) {
                response.sendRedirect("/mdm/login-agent#auth-failed");
            }
        } catch (e) {
            log.error("Error occurred when enrolling " + e);
        }

        /*iOSResponse = {
            "deviceCheckURL" : mdmProps.iOSConfigRoot + 'device/deviceid',
            "inputs" : { "challengeToken" : challengeToken }
        };*/

        /*setInterval(function(){
            var deviceCheckURL = mdmProps.iOSConfigRoot + 'device/deviceid';
            var inputs = { "challengeToken": challengeToken };

            var xhr = new XMLHttpRequest();
            xhr.open("POST", deviceCheckURL);
            xhr.setRequestHeader("Accept", "application/json");
            xhr.setRequestHeader("Content-Type", "application/json");
            xhr.send(stringify(inputs));

            if(xhr.status == 200) {
                var responseText = parse(xhr.responseText);
                var deviceID = responseText.deviceID;

                if(deviceID != null) {
                    window.location.href = "wso2agent://" + deviceID;
                }
            }
            log.error("ReadyState : "+xhr.readyState);
            log.error("<br>ResponseStatus : "+xhr.status);
            log.error("<br>ResponseText : "+xhr.responseText);
        }, 5000);*/

    } else if(platform == "Windows Phone") {
        var action = session.get("windows_action");
        var binaryToken = session.get("windows_binary_token");
        log.debug("Windows enrollment action:- " + action);
        log.debug("Windows enrollment action for user :- " + username);
        %>
        <html>
          <head>
            <title>
              Working...
            </title>
            <script>
              function formSubmit() {
                document.forms[0].submit();
              }
              window.onload=formSubmit;
            </script>
          </head>
          <body>
            <form method="post" action="<%=action%>">
              <p>
                <input type="hidden" name="wresult" value="<%=binaryToken%>"/>
              </p>
              <input type="submit"/>
            </form>
          </body>
        </html>
        <%
    }
} else {
    response.sendError(400);
}
%>