<%
/*
 * Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

var log = new Log("api/invoker-api.jag");

var uri = request.getRequestURI();
var uriMatcher = new URIMatcher(String(uri));

var constants = require("/modules/constants.js");
var mdmProps = require("/config/mdm-props.js").config();
var serviceInvokers = require("/modules/backend-service-invoker.js")["backendServiceInvoker"];

if (uriMatcher.match("/{context}/api/invoker/execute/")) {
    var method = request.getContent().actionMethod;
    var url = request.getContent().actionUrl;
    var payload = request.getContent().actionPayload;

    if (!method) {
        method = parse(request.getContent()).actionMethod;
    }

    if (!url) {
        url = parse(request.getContent()).actionUrl;
    }

    if (!payload) {
        payload = parse(request.getContent()).actionPayload;
    }

    var targetURL = mdmProps["httpsURL"] + url;

    try {
        switch (method) {
            case constants["HTTP_GET"]:
                serviceInvokers.XMLHttp.get(
                    targetURL,
                    function (responseFromBackend) {
                        response.status = responseFromBackend.status;
                        response.content = responseFromBackend.responseText;
                    }
                );
                break;
            case constants["HTTP_POST"]:
                serviceInvokers.XMLHttp.post(
                    targetURL,
                    payload,
                    function (responseFromBackend) {
                        response.status = responseFromBackend.status;
                        response.content = responseFromBackend.responseText;
                    }
                );
                break;
            case constants["HTTP_PUT"]:
                serviceInvokers.XMLHttp.put(
                    targetURL,
                    payload,
                    function (responseFromBackend) {
                        response.status = responseFromBackend.status;
                        response.content = responseFromBackend.responseText;
                    }
                );
                break;
            case constants["HTTP_DELETE"]:
                serviceInvokers.XMLHttp.delete(
                    targetURL,
                    function (responseFromBackend) {
                        response.status = responseFromBackend.status;
                        response.content = responseFromBackend.responseText;
                    }
                );
                break;
        }
    } catch (e) {
        log.error("Exception occurred while trying to access backend " +
            "REST API services from Jaggery API invoker layer", e);
    }
}
%>
