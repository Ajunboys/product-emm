<%
/*
 * Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/*
 @Deprecated
 */

var uri = request.getRequestURI();
var uriMatcher = new URIMatcher(String(uri));

var log = new Log("api/operation-api.jag");

var deviceModule = require("/modules/device.js")["deviceModule"];
var serviceInvokers = require("/modules/backend-service-invoker.js")["backendServiceInvoker"];
var mdmProps = require('/config/mdm-props.js').config();
var result;

if (uriMatcher.match("/{context}/api/operation")) {
    payload = request.getContent();
    result = deviceModule.performOperation(payload.devices, payload.operation);
} else if (uriMatcher.match("/{context}/api/operation/paginate")) {
    var deviceType = request.getParameter("deviceType");
    var deviceId = request.getParameter("deviceId");
    var index = request.getParameter("start");
    var length = request.getParameter("length");
    var search = request.getParameter("search[value]");
    /*var targetURL = mdmProps.httpsURL + "/mdm-admin/operations/paginate/"+deviceType+"/"+deviceId + "?start=" + index +
                    "&length=" + length + "&search=" +search;*/
    var targetURL = mdmProps["httpsURL"] + mdmProps["backendRestEndpoints"]["deviceMgt"] + "/devices/" +
                    deviceType + "/" + deviceId + "/operations?offset=" + index +
                    "&limit=" + length;
    serviceInvokers.XMLHttp.get(
            targetURL,
            function (backendResponse) {
                if (backendResponse.status == 200 && backendResponse.responseText) {
                    log.info(backendResponse.responseText);
                    var paginatedResult = {};
                    paginatedResult["recordsTotal"] = 16;
                    paginatedResult["recordsFiltered"] = 16;
                    paginatedResult["draw"] = parseInt("0");
                    paginatedResult["data"] = parse(backendResponse.responseText);
                    response.status = 200;
                    result = paginatedResult;

                    log.info(stringify(result));
                } else {
                    response.status = backendResponse.status;
                    result =  parse(backendResponse.responseText);
                }
            });
}
if (result) {
    print(result);
}
%>